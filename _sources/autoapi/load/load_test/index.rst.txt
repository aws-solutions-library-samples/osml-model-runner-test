load.load_test
==============

.. py:module:: load.load_test


Attributes
----------

.. autoapisummary::

   load.load_test.job_summary_log_file
   load.load_test.job_status_log_file
   load.load_test.job_output_log_file
   load.load_test.logger
   load.load_test.fh


Classes
-------

.. autoapisummary::

   load.load_test.ImageRequestStatus


Functions
---------

.. autoapisummary::

   load.load_test.get_s3_images
   load.load_test.check_s3_bucket
   load.load_test.get_model_instance_type
   load.load_test.is_complete
   load.load_test.monitor_job_status
   load.load_test.display_image_results
   load.load_test.start_workflow


Module Contents
---------------

.. py:data:: job_summary_log_file
   :value: 'logs/job_summary.json'


.. py:data:: job_status_log_file
   :value: 'logs/job_status.json'


.. py:data:: job_output_log_file
   :value: 'logs/job_log.log'


.. py:data:: logger

.. py:data:: fh

.. py:class:: ImageRequestStatus

   Bases: :py:obj:`str`


   Enumeration defining status for image


   .. py:attribute:: STARTED
      :value: 'STARTED'



   .. py:attribute:: PARTIAL
      :value: 'PARTIAL'



   .. py:attribute:: IN_PROGRESS
      :value: 'IN_PROGRESS'



   .. py:attribute:: SUCCESS
      :value: 'SUCCESS'



   .. py:attribute:: FAILED
      :value: 'FAILED'



.. py:function:: get_s3_images(bucket_name: str) -> Union[List[Dict[str, str]], None]

   Get all s3 images within the bucket to iterate through for load testing

   :param bucket_name: Name of source bucket to use for testing images

   :return: List of s3 images to process for load test


.. py:function:: check_s3_bucket(bucket_name: str) -> bool

   Check to see if the S3 Bucket exists

   :param bucket_name: Name of the bucket

   :return: True if the bucket exists, False otherwise


.. py:function:: get_model_instance_type(sm_model: str) -> str

   Get Model Instance Type

   :param sm_model: Name of the SageMaker Model

   :return: Model instance type


.. py:function:: is_complete(job_status_dict: Dict) -> bool

.. py:function:: monitor_job_status(job_status_dict: Dict, expected_end_time: datetime.datetime) -> None

   Polls the messages from SQS, check every message in the SQS to determine the status of it. Then
   update the item in the job_status dict and go on to the next one.

   :param job_status_dict: Dict containing job information
   :param expected_end_time: Expected end time to end the thread

   :return: None


.. py:function:: display_image_results(job_status_dict: Dict) -> Dict

   Calculate and display the result of LoadTest

   :param job_status_dict: Dictionary containing job information

   :return: Dict = dictionary containing the results


.. py:function:: start_workflow() -> None

   The workflow to build an image request for a specific SM endpoint and then place it
   on the corresponding SQS queue every defined second for ModelRunner to pick up and process.
   Once the image has been completed, return the associated image_id and image_request object for analysis.
   Then it will display the results for all the images have been sent for ModelRunner and calculate
   how many have succeeded or failed.

   :return: None


